@using Orchard.ContentManagement
@using Orchard.Utility.Extensions

@{
    ContentItem contentItem = Model.ContentItem;
    var typeDisplayName = contentItem.TypeDefinition.DisplayName ?? contentItem.ContentType.CamelFriendly();
}

<section data-ng-controller="GeneralDetailCtrl">
    <div id="page-actions">
        <h1 class="pull-left">{{moduleName}} <span>create a data</span></h1>
    </div>
    <section id="main-content">
        <header id="page-title" class="clearfix">
            <btn-actions>
                <button class="btn btn-small" ng-click="exit()">Back</button>
                <button class="btn btn-small btn-primary" ng-click="save()">Save</button>
                <button class="btn btn-small btn-primary" ng-click="saveAndBack()">Save & Back</button>
            </btn-actions>
        </header>

        <div class="row-fluid">
            <section class="edit-mode span12">
                @using (Html.BeginFormAntiForgeryPost(Url.Action("Edit", new { ReturnUrl = Request.QueryString["ReturnUrl"] }),
                                                          FormMethod.Post, new { @name = "myForm", @ng_submit = "save()" }))
                {
                    @Html.ValidationSummary()
                    // Model is a Shape, calling Display() so that it is rendered using the most specific template for its Shape type

                    Output.Write(Model.Layout);
                }
            </section>
        </div>
    </section>
</section>
@Display(Model)

<script type="text/javascript">
    $(function () {
        $(document).ready(function () {

            $.validator.addMethod("phonenumber", function (value) {
                if (value) {
                    return (/^((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)$/.test(value));
                }
                return true;
            }, "Please enter a valid phone.");
            $.validator.classRuleSettings.phonenumber = { phonenumber: true };


            $.validator.addMethod("decimalplaces", function (value, em) {
                if (value) {
                    var len = $(em).attr("decimalplaces");
                    var reg = new RegExp("^(-?\\d+)(\\.\\d{1," + len + "})?$");
                    return reg.test(value);
                }
                return true;
            }, $.validator.format("Decimal places exceed {0}."));
            $.validator.classRuleSettings.decimalplaces = {
                decimalplaces: function (em) {
                    return $(em).attr("decimalplaces");
                }
            };
            
            $("form[name=myForm]").validate({
                ignore: "*:not('.toValidate *')",
                onkeyup: function (element) {
                    if (element.type == "text") {
                        this.form();
                    }
                }
            });
        });
        $('.page-actions').affix({ offset: { top: 71 } });
    });
</script>
