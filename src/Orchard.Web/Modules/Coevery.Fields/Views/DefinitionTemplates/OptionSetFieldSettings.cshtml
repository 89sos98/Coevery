@model OptionSetFieldSettings
@using Coevery.Fields.Settings;

@if (!Request.Url.LocalPath.Contains("/Entities/EditFields/")) {
    <section class="control-group data-row">
        <label class="control-label">
            Item Labels
        </label>
        <div class="controls">
            @Html.TextAreaFor(m => m.LabelsStr, new {@class = "span12 required"})
        </div>
    </section>

    <section class="control-group data-row">
        <label class="control-label">
            Default Value
        </label>
        <div class="controls">
            @Html.TextBoxFor(d => d.DefaultValue, new {@class = "span12 digits"})
        </div>
    </section>
}
else {
    @Html.HiddenFor(model => model.LabelsStr)
    @Html.HiddenFor(model => model.DefaultValue)
    //Html.RenderAction("Items", "SystemAdmin", 
    //    new RouteValueDictionary {
    //        { "Area", "Coevery.Entities" }, 
    //        { "id", Request.Params["id"] }, 
    //        { "fieldName", Request.Params["fieldName"] }
    //    });
}
@Html.HiddenFor(model => model.DependencyMode)
@Html.HiddenFor(model => model.OptionSetId)

<section class="control-group data-row">
    <label class="control-label">
        Select Count
    </label>
    <div class="controls">
        <input type="text" name="@Html.FieldNameFor(model=>model.SelectCount)" class="span12 digits" value="@Model.SelectCount"
               id="select-SelectCount" />
    </div>
</section>

<section class="control-group data-row">
    <label class="control-label">
        Display Option
    </label>
    <div class="controls">
        @{
            foreach (var displayOpt in Enum.GetValues(typeof (SelectionMode)).Cast<SelectionMode>()) {
                <label class="radio" id="display-@displayOpt">
                    <input type="radio" name="@Html.FieldNameFor(m => m.DisplayOption)" 
                        value="@displayOpt" class="displayOption"  
                        @if (displayOpt == Model.DisplayOption) {
                            <text> checked </text>
                        } />
                    @T(displayOpt.ToString())
                </label>
            }
        }
    </div>
</section>

<section class="control-group data-row" id="select-DisplayLines">
    <label class="control-label">
        Display Lines
    </label>
    <div class="controls">
        @Html.TextBoxFor(d => d.DisplayLines, new { @class = "span12 digits" })
    </div>
</section>

<script type="text/javascript">
    function showAndHideOption(event, checkboxE, radiobuttonE, selCnt) {       
        if (selCnt.val() == 1) {
            checkboxE.hide();
            radiobuttonE.show();        
        } else if (selCnt.val() > 1) {
            radiobuttonE.hide();
            checkboxE.show();
        }
    }

    $(function () {
        var checkboxE = $("#display-Checkbox");
        var radiobuttonE = $("#display-Radiobutton");
        var selCnt = $("#select-SelectCount");
        var disLines = $("#select-DisplayLines");
        var displayOpt = $("input.displayOption:checked").val();

        showAndHideOption(null, checkboxE, radiobuttonE, selCnt);
        if (displayOpt == "@T(SelectionMode.DropDown.ToString())") {
            disLines.show();
        } else {
            disLines.hide();
        }
        selCnt.attr("selectSetting", displayOpt);
        
        selCnt.keyup(function(event) {
            showAndHideOption(event, checkboxE, radiobuttonE, selCnt);
            $("#select-DisplayLines input").val(selCnt.val());
        });

        $("input.displayOption").click(function() {
            displayOpt = $(this).val();
            selCnt.attr("selectSetting", displayOpt);
            if (displayOpt == "@T(SelectionMode.DropDown.ToString())") {
                disLines.show();
            } else {
                disLines.hide();
            }
        });

        $.validator.addMethod("selectSetting", function (value, element, param) {
            if ((param == "@T(SelectionMode.Radiobutton.ToString())" && value == 1)
                || (param == "@T(SelectionMode.Checkbox.ToString())" && value > 1)
                || (param == "@T(SelectionMode.DropDown.ToString())" && value > 0)) {
                return true;
            } else {
                return false;
            }           
        }, "Wrong select setting!");
        $.validator.classRuleSettings.selectSetting = { selectSetting: true };
    });
</script>

