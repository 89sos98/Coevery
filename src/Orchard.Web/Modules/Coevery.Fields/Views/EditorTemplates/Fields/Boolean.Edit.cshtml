@model Coevery.Fields.Fields.BooleanField
@using Orchard.Utility.Extensions;
@using Coevery.Fields.Settings;
@{
    var settings = Model.PartFieldDefinition.Settings.GetModel<BooleanFieldSettings>();
}

<label class="span3 title" for="@Html.FieldIdFor(m => m.Value)">@Model.DisplayName</label>
<div class="span9">
    <div class="control span12">
        @switch (settings.SelectionMode) {
            case BooleanDisplayMode.Checkbox:

                <label class="checkbox span12" for="@(Html.FieldIdFor(m => m.Value))">
                    <input type="checkbox" id="@(Html.FieldIdFor(m => m.Value))" value="true" name="@Html.FieldNameFor(m => m.Value)" @if (Model.Value.HasValue && Model.Value.Value) {
                                                                                                                                          <text>checked="checked"</text>
                                                                                                                                      } /><input name="@Html.FieldNameFor(m => m.Value)" type="hidden" value="false" />
                    @T(settings.OnLabel)
                </label>
                break;
            case BooleanDisplayMode.Radiobutton:
                <label for="radio-true" class="radio span4">
                    <input type="radio" name="@Html.FieldNameFor(m => m.Value)" id="radio-true" value="true" @if (Model.Value.HasValue && Model.Value.Value) {
                                                                                                                 <text>checked="checked"</text>
                                                                                                             } />
                    @T(settings.OnLabel)
                </label>


                <label for="radio-false" class="radio span4">
                    <input type="radio" name="@Html.FieldNameFor(m => m.Value)" id="radio-false" value="false" @if (Model.Value.HasValue && !Model.Value.Value) {
                                                                                                                   <text>checked="checked"</text>
                                                                                                               } />
                    @T(settings.OffLabel)
                </label>

                break;
            default:
                break;
        }
        @Html.ValidationMessageFor(m => m.Value)
    </div>
</div>
