@model Coevery.Metadata.ViewModels.EditTypeViewModel
@{
    Script.Require("MetadataContext");
    Script.Require("MetadataDetailController");
}
@Display.FootScripts()

<header id="main-header" class="page-header" style="background-image: none; margin-bottom: 0;">
    <h1 style="background-image: none;">Meta Detail <span>Metadata add/edit</span></h1>
</header>

<section ng-controller="MetadataDetailCtrl">
    <section class="form-actions" style="margin-top: -10px; padding-top: 10px; padding-left: 40px; padding-bottom: 10px; height: 30px; border-bottom: 1px solid #e5e5e5">
        <button class="btn btn-success" ng-click="add()">
            <i class="icon-plus"></i> New Field
        </button>
        <button class="btn" ng-click="gotoDependency()">Field Dependency</button>
    </section>
    <section id="main-content">
        <div class="row-fluid">
            <section class="span12 widget">
                <header class="widget-header">
                    <span class="title"></span>
                </header>
                <section class="widget-content form-container">
                    @using (Html.BeginFormAntiForgeryPost(Html.ViewContext.HttpContext.Request.Url.PathAndQuery, FormMethod.Post, new { @class = "form-horizontal" }))
                    {
                        // todo: come up with real itemtype definitions and locations for said definitions
                        @Html.ValidationSummary()
                        <section class="control-group">
                            <label class="control-label" for="inputName">Name</label>
                            <div class="controls">
                                @Html.TextBoxFor(m => m.DisplayName, new { @class = "span12" })
                                <span class="hint">@T("Content Type Id: {0}", Model.Name)</span>
                            </div>
                            @* todo: if we continue to go down the midrodata route, some helpers would be nice *@
                            <meta itemprop="DisplayName" content="@Model.DisplayName" />
                            @* has unintended consequences (renamging the type) - changing the name creates a new type of that name *@
                            <meta itemprop="Id" content="@Model.Name" />
                            @Html.HiddenFor(m => m.Name)
                        </section>
                        <section class="control-group">
                            <label class="control-label">Setting</label>
                            <div class="controls">
                                @{Html.RenderTemplates(Model.Templates); }
                            </div>
                        </section>

                        <section class="form-actions">
                            <input type="submit" value="Save" name="submit.Save" class="btn btn-primary">
                            <input type="button" value="Exit" class="btn" ng-click="exit()" />
                        </section>
                    }
                </section>
            </section>
        </div>
        <h4>System Fields</h4>
        <div class="row-fluid">
            <section class="gridStyle" ng-grid="gridOptions"></section>
        </div>
        <h4>User Fields</h4>
        <div class="row-fluid">
            <section class="gridStyle" ng-grid="userFields"></section>
        </div>
    </section>
</section>

