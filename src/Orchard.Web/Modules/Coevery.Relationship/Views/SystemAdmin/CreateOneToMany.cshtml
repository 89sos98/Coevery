@using System.Web.Mvc
@using System.Web.Routing
@using Coevery.Relationship.Models
@using Coevery.Relationship.Records
@using System.Web.Mvc.Html
@using Orchard.Mvc.Html
@model OneToManyRelationshipModel

@{
    var isCreate = true;
}
    
@helper DisplayInput(string label, HtmlString input) {
    <section class="control-group">
        <label class="control-label">
            @label
        </label>
        <div class="controls">
            @input
        </div>
    </section>
}

<style>
    .pickList .btn [class^="icon-"] {
        width: auto;
    }
</style>
<header id="page-title">
    <h1 class="pull-left">"One to Many Relationship Detail " <span>show one to many relationship detail information</span></h1>
</header>
    
<section id="main-content" style="margin-top: 47px">
    <div id="page-actions" class="clearfix">
        <btn-actions>
            <button class="btn btn-small" data-ng-click="exit()">Back</button>
            <button data-ng-click="save()" class="btn btn-primary btn-small">Save</button>
        </btn-actions>
    </div>

    <div class="row-fluid">
        @using (Html.BeginFormAntiForgeryPost(Html.ViewContext.HttpContext.Request.Url.PathAndQuery, FormMethod.Post
                                              , new {@class = "form-horizontal no-border form-fontstyle", id = "onetomany-form"})) {
            @Html.ValidationSummary()
            @Html.HiddenFor(model => model.IsCreate, new {id = "IsCreate"})

            <fieldset>
                <legend>General Information</legend>
                                       
                @DisplayInput("Relationship Name"
                              , Html.TextBoxFor(model => model.Name, new {@class = "span12", id = "relation-name"}))
                    
                @DisplayInput("Primary Entity"
                              , Html.TextBoxFor(model => model.PrimaryEntity
                                                , new {@class = "span12 primary-entity"}))
                    
                @if (Model.IsCreate) {
                    @DisplayInput("Related Entity"
                                  , Html.DropDownListFor(model => model.RelatedEntity, Model.EntityList,
                                                         "Please select related entity", new {@class = "span12 related-entity"}))
                }
                else {
                    @DisplayInput("Related Entity"
                                  , Html.TextBoxFor(model => model.RelatedEntity, new {@class = "span12 related-entity", disabled = "disabled"}))
                }

                <section class="control-group">
                    <label class="control-label">
                        What to do if the lookup record is deleted?
                    </label>
                    <div class="controls">
                        <label class="radio">
                            <input type="radio" ng-model="recordDeleteBehavior" 
                                   name="@Html.NameFor(model => model.DeleteOption)"
                                   ng-disabled="required" value="@OneToManyDeleteOption.NoAction" 
                                @if (Model.IsCreate) {
                                    <text> disabled="disabled" </text>
                                }/>
                            Clear the value of this field
                        </label>
                        <label class="radio">
                            <input type="radio" ng-model="recordDeleteBehavior" 
                                   name="@Html.NameFor(model => model.DeleteOption)"
                                   value="@OneToManyDeleteOption.NotAllowed"
                                @if (Model.IsCreate) {
                                    <text> disabled="disabled" </text>
                                }/>
                            Don't allow delete
                        </label>
                        <label class="radio">
                            <input type="radio" ng-model="recordDeleteBehavior" 
                                   name="@Html.NameFor(model => model.DeleteOption)"
                                   value="@OneToManyDeleteOption.CascadingDelete" 
                                @if (Model.IsCreate) {
                                    <text> disabled="disabled" </text>
                                }/>
                            Cascading delete
                        </label>
                    </div>
                </section>
            </fieldset>

            <fieldset>
                <legend>Related Entity Display Option</legend>
                
                @DisplayInput("Related Entity List Label"
                              , Html.TextBoxFor(model => model.RelatedListLabel, new {@class = "span12"}))

                
                <section class="control-group">
                    <div class="controls">
                        <label class="checkbox">
                            <input type="checkbox" ng-model="showRelatedList" value="true"
                                   name="@Html.NameFor(model => model.ShowRelatedList)"/>
                            Show Related Entity List in the Primary Entity's Detail Page
                        </label>
                    </div>
                </section>              

                <section class="control-group" ng-show="showRelatedList">
                    <div class="controls">
                        <select id="picklist-ex" multiple="multiple" 
                                name="@Html.NameFor(model => model.ColumnFieldList)">
                            <option value="0"> </option>
                        </select>
                    </div>
                </section>

            </fieldset>

            if (Model.IsCreate) {
                <fieldset>
                    <legend>Lookup Field</legend>
                    @DisplayInput("Field Label", Html.TextBoxFor(model => model.FieldLabel, new {@class = "span12"}))
                    @DisplayInput("Field Label", Html.TextBoxFor(model => model.FieldName, new {@class = "span12"}))

                    <section class="control-group">
                        <label class="control-label">
                            Options
                        </label>
                        <div class="controls">
                            <label class="checkbox">
                                <input type="checkbox" name="@Html.NameFor(model => model.Required)" ng-model="required" />
                                Required
                            </label>
                            <label class="checkbox">
                                <input type="checkbox" name="@Html.NameFor(model => model.ReadOnly)" ng-model="readonly" />
                                Read-Only
                            </label>
                            <label class="checkbox">
                                <input type="checkbox" name="@Html.NameFor(model => model.AlwaysInLayout)" ng-model="alwaysInLayout" />
                                Always In Layout
                            </label>
                            <label class="checkbox">
                                <input type="checkbox" name="@Html.NameFor(model => model.DisplayAsLink)" />
                                Display As Link
                            </label>
                            <label class="checkbox">
                                <input type="checkbox" name="@Html.NameFor(model => model.IsSystemField)" />
                                System Field
                            </label>
                            <label class="checkbox">
                                <input type="checkbox" name="@Html.NameFor(model => model.IsAudit)" />
                                Is Audit
                            </label>
                        </div>
                    </section>

                    @DisplayInput("Help Text", Html.TextAreaFor(model => model.HelpText, new {@class = "span12"}))
                </fieldset>
            }
        }
    </div>
</section>

<script>
    $(document).ready(
        function () {
            $("#picklist-ex").picklist({
                addAllLabel: '<i class="icon-caret-right"></i><i class="icon-caret-right"></i>',
                addLabel: '<i class="icon-caret-right"></i>',
                removeAllLabel: '<i class="icon-caret-left"></i><i class="icon-caret-left"></i>',
                removeLabel: '<i class="icon-caret-left"></i>',
                sourceListLabel: "Available Fields",
                targetListLabel: "Selected Fields"
            });

            var jsonUrl = "@Url.Action("FieldNames", "SystemAdmin", new RouteValueDictionary { { "Area", "Coevery.Relationship" } })";
            var version = 0;
            var getFields = function (entityName,selectElement) {
                if (!entityName) {
                    return;
                }   

                $.post(jsonUrl, {
                    entityName: entityName,
                    version: ++version,
                    __RequestVerificationToken: $("input[name=__RequestVerificationToken]").val()
                },
                    function (data) {
                        if (version == data.version && data.result) {
                            selectElement.picklist("destroy");

                            selectElement.html(data.result).picklist({
                                addAllLabel: '<i class="icon-caret-right"></i><i class="icon-caret-right"></i>',
                                addLabel: '<i class="icon-caret-right"></i>',
                                removeAllLabel: '<i class="icon-caret-left"></i><i class="icon-caret-left"></i>',
                                removeLabel: '<i class="icon-caret-left"></i>',
                                sourceListLabel: "Available Fields",
                                targetListLabel: "Selected Fields"
                            });
                        }
                    },
                    "json"
                );
            };

            $("input.primary-entity").prop('disabled', true);
            getFields($("select.related-entity option:selected").val(),$("#picklist-ex"));

            $("select.related-entity").change(function () {
                getFields($("select.related-entity option:selected").val(), $("#picklist-ex"));
            });
            
            if ("@Model.IsCreate".toLowerCase() == "false") {
                
            }
        }
    );
</script>
