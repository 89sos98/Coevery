@model Orchard.Workflows.ViewModels.AdminEditViewModel
@using ClaySharp.Implementation
@using Orchard.ContentManagement
@using Orchard.Localization
@using Orchard.Utility.Extensions
@using Orchard.Workflows.Models;
@using Orchard.Workflows.ViewModels;
@using Orchard.DisplayManagement;

@{
    Layout.Title = @T("Edit Workflow");
    Style.Include("admin-workflows.css");
    Script.Require("jQueryUI");
    Script.Include("jquery.jsPlumb-1.3.16-all-min.js");
    
    //        var editorShape = ((IShapeFactory)New).Create(activity.Name + "_Editor");

}

<!-- List of available activities -->
<div id="activity-toolbox">
    <ul>
    @foreach (var activity in Model.AllActivities) {
        IShape shape = New.Activity(activity);
        shape.Metadata.Alternates.Add("Activity__" + activity.Name);
        
        <li class="activity-toolbox-item" data-activity-name="@activity.Name">
            <h2>@activity.Name</h2>
        </li>    
    }   
    </ul> 
</div>

@using (Html.BeginFormAntiForgeryPost()) {
    @Html.ValidationSummary()

    <div class="editor">
    </div>
}

@* Render script to initialize a new jsplumb shapes in the form of activities['activity-name'].create() *@
@using (Script.Foot()) {
    <script type="text/javascript">
        //<![CDATA[
        var activities = {};
        @foreach (var activity in Model.AllActivities) {
            IShape shape = New.Activity(activity);
            shape.Metadata.Alternates.Add("Activity__" + activity.Name);
        <text>
        activities['@activity.Name'] = {};
        activities['@activity.Name']['create'] = function () {
            var dom = $('@Html.Raw(HttpUtility.JavaScriptStringEncode(Display(shape).ToString()))');
            var editor = $('.editor');
            editor.append(dom);
            jsPlumb.draggable(dom, { containment: "parent", scroll: true });

            jsPlumb.makeTarget(dom, {
                dropOptions: { hoverClass: "dragHover" },
                anchor: "Continuous",
                endpoint: "Blank",
                paintStyle: { fillStyle: "#558822", radius: 3 },
            });
        </text>

            var outcomes = activity.GetPossibleOutcomes(null);
            foreach(var outcome in outcomes) {
        <text>
        jsPlumb.addEndpoint(dom, {
            anchor: "Continuous",
            connectorOverlays: [["Label", { label: "@HttpUtility.JavaScriptStringEncode(outcome.ToString())", cssClass: "connection-label" }]],
        }, sourceEndpointOptions);
        </text>    
            }
                
        <text>
    };
        </text>
        }
        //]]>
    </script>
}

@using (Script.Foot()) {
<script type="text/javascript">
    //<![CDATA[
    var connectorPaintStyle = {
        lineWidth: 3,
        strokeStyle: "grey",
        joinstyle: "round",
        //outlineColor: "white",
        //outlineWidth: 7
    };

    var connectorHoverStyle = {
        lineWidth: 3,
        strokeStyle: "#2e2aF8"
    };

    var sourceEndpointOptions = {
        endpoint: "Dot",
        paintStyle: { fillStyle: "#225588", radius: 7 },
        isSource: true,
        isTarget: false,
        connector: ["Flowchart"], // gap needs to be the same as makeTarget.paintStyle.radius
        connectorStyle: connectorPaintStyle,
        hoverPaintStyle: connectorHoverStyle,
        connectorHoverStyle: connectorHoverStyle,
        overlays: [["Label", { location: [0.5, 1.5], cssClass: "sourceEndpointLabel" }]]
    };

    jsPlumb.bind("ready", function() {
            
        jsPlumb.importDefaults({
            // default drag options
            DragOptions : { cursor: 'pointer', zIndex:2000 },
            // default to blue at one end and green at the other
            EndpointStyles : [{ fillStyle:'#225588' }, { fillStyle:'#558822' }],
            // blue endpoints 7 px; green endpoints 11.
            Endpoints : [ [ "Dot", {radius:7} ], [ "Dot", { radius:7 } ]],
            // the overlays to decorate each connection with.  note that the label overlay uses a function to generate the label text; in this
            // case it returns the 'labelText' member that we set on each connection in the 'init' method below.
            ConnectionOverlays: [
                ["Arrow", { width: 12, length: 12, location: 1 }],
                // ["Label", { location: 0.1, id: "label", cssClass: "aLabel" }]
            ],
            ConnectorZIndex:5
        });

        //jsPlumb.bind("jsPlumbConnection", function (connInfo, originalEvent) {
        //    init(connInfo.connection);
        //});
    });

    // a new connection is created
    jsPlumb.bind("jsPlumbConnection", function(connectionInfo) {
        // ...update your data model here.  The contents of the 'connectionInfo' are described below.
    });

    // a connection is detached
    jsPlumb.bind("jsPlumbConnectionDetached", function(connectionInfo) {
        // ...update your data model here.  The contents of the 'connectionInfo' are described below.
    });

    // create a new activity node on the editor
    $('.activity-toolbox-item').on('click', function () {
        var self = $(this);
        var activityName = self.data('activity-name');
        activities[activityName].create();
    });
//]]>
</script>
}