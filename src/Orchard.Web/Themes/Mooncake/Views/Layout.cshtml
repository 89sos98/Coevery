@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix) {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : "";}).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{
    /* Global includes for the theme
    ***************************************************************/
    
    SetMeta("X-UA-Compatible", "IE=edge,chrome=1");
    Style.Include("http://fonts.googleapis.com/css?family=Lobster&subset=latin");
    Style.Include("layout.css");
    Style.Include("bootstrap/bootstrap.min.css");
    Style.Include("uniform/css/uniform.default.css");
    Style.Include("fonts/icomoon/style.css");
    
    Style.Include("icons.css");
    Style.Include("widget.css");
    Style.Include("form.css");
    Style.Include("table.css");
    Style.Include("misc.css");
    Style.Include("site.css");
    Style.Include("ui.css");

    Script.Require("jQuery");


    /* Some useful shortcuts or settings
    ***************************************************************/

    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new [] {"AsideFirst", "AsideSecond"}, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass)) {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle tripel widget zones on and off
    var tripelClass = CalcuClassify(new [] {"TripelFirst", "TripelSecond", "TripelThird"}, "tripel-"); // for tripel-1, triple-2, etc. if any of the tripel zones are filled
    if (HasText(tripelClass)) {
        Model.Classes.Add(tripelClass);
    }

    //Add classes to the wrapper div to toggle quad widget zones on and off
    var footerQuadClass = CalcuClassify(new [] {"FooterQuadFirst", "FooterQuadSecond", "FooterQuadThird", "FooterQuadFourth"}, "split-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
    if (HasText(footerQuadClass)) {
        Model.Classes.Add(footerQuadClass);
    }

    /* Inserting some ad hoc shapes
    ***************************************************************/

    WorkContext.Layout.Header.Add(New.Branding(), "5"); // Site name and link to the home page
    WorkContext.Layout.Footer.Add(New.BadgeOfHonor(), "5"); // Powered by Orchard
    WorkContext.Layout.Footer.Add(New.User(), "10"); // Login and dashboard links

    /* Last bit of code to prep the layout wrapper
    ***************************************************************/
    
    Model.Id = "wrapper";
    var tag = Tag(Model, "div"); // using Tag so the layout div gets the classes, id and other attributes added to the Model
}
@tag.StartElement

@if (Model.Header != null) 
{
    <header id="header" class="navbar navbar-inverse">
        <div class="navbar-inner">
            <div class="container">
                @Zone(Model.Header)
            </div>
        </div>
    </header>
}
<div id="content-wrap">
    <div id="content">
        <div id="content-outer">
            <div id="content-inner">
                <aside id="sidebar">
                    <nav id="navigation" class="collapse">
                        @if (Model.Navigation != null) 
                        {
                            @Zone(Model.Navigation)
                        }
                    </nav>
                </aside>
                <div id="sidebar-separator"></div>
                <section id="main" class="clearfix">
                    @Zone(Model.Content)
                </section>
            </div>
        </div>
    </div>
</div>
<footer id="footer">
    <div class="footer-left">MoonCake - Responsive Admin Template</div>
    <div class="footer-right">
        <p>Copyright 2012. All Rights Reserved.</p>
    </div>
</footer>
@tag.EndElement